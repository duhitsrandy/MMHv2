import { useState } from 'react';
import { toast } from 'sonner';
import { createSearchAction, createMultiOriginSearchAction } from '@/actions/db/searches-actions';
import { SelectSearch } from '@/db/schema';

// Define the type for the data needed to create a new search, excluding fields generated by the DB
// This represents the full search data including userId, used for the action
type FullSearchData = Omit<SelectSearch, 'id' | 'createdAt' | 'updatedAt'>;

// Define the type for the data passed *into* the saveSearch function from the component
// It excludes fields added by the hook (userId) or the DB (id, createdAt)
type SearchInputData = Omit<SelectSearch, 'id' | 'createdAt' | 'userId' | 'updatedAt'>;

// New type for multi-origin search data
type MultiOriginSearchData = {
  origins: Array<{
    address: string;
    latitude: string;
    longitude: string;
    displayName?: string;
  }>;
  searchMetadata?: any;
};

interface UseSearchSaverProps {
  userId: string | null | undefined;
  onSearchSaved: (newSearch: SelectSearch) => void; // Callback to update local state
}

export function useSearchSaver({ userId, onSearchSaved }: UseSearchSaverProps) {
  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Legacy function for 2-location searches
  const saveSearch = async (searchInputData: SearchInputData) => {
    if (!userId) {
      console.log('[useSearchSaver] User not signed in or userId missing, skipping search save.');
      // Optionally set an error or return a specific status
      setError('User must be signed in to save searches.');
      return; // Don't attempt to save if not signed in
    }

    // Ensure the provided data includes the userId
    // Construct the full data needed for the action
    const completeSearchData: FullSearchData = { 
        ...searchInputData,
        userId 
        // updatedAt could be added here if needed, or handled by the DB
    };

    setIsSaving(true);
    setError(null);
    console.log('[useSearchSaver] Attempting to save search...', completeSearchData);

    try {
      const result = await createSearchAction(completeSearchData);
      console.log('[useSearchSaver] createSearchAction result:', result);

      if (result.isSuccess && result.data) {
        onSearchSaved(result.data); // Call the callback with the new search data
        toast.success('Search saved to history.');
        console.log('[useSearchSaver] Search saved successfully.');
      } else {
        const errorMessage = result.message || 'Failed to save search to history.';
        console.error('[useSearchSaver] Failed to save search:', errorMessage);
        setError(errorMessage);
        toast.error(errorMessage);
      }
    } catch (err) {
      console.error('[useSearchSaver] CATCH Error saving search:', err);
      const errorMessage = err instanceof Error ? err.message : 'Failed to save search due to an unexpected error.';
      setError(errorMessage);
      toast.error('Failed to save search to history due to an unexpected error.');
    } finally {
      setIsSaving(false);
    }
  };

  // New function for multi-origin searches
  const saveMultiOriginSearch = async (searchData: MultiOriginSearchData) => {
    if (!userId) {
      console.log('[useSearchSaver] User not signed in or userId missing, skipping search save.');
      setError('User must be signed in to save searches.');
      return;
    }

    setIsSaving(true);
    setError(null);
    console.log('[useSearchSaver] Attempting to save multi-origin search...', searchData);

    try {
      const result = await createMultiOriginSearchAction(searchData.origins, searchData.searchMetadata);
      console.log('[useSearchSaver] createMultiOriginSearchAction result:', result);

      if (result.isSuccess && result.data) {
        onSearchSaved(result.data); // Call the callback with the new search data
        toast.success('Search saved to history.');
        console.log('[useSearchSaver] Multi-origin search saved successfully.');
      } else {
        const errorMessage = result.message || 'Failed to save search to history.';
        console.error('[useSearchSaver] Failed to save multi-origin search:', errorMessage);
        setError(errorMessage);
        toast.error(errorMessage);
      }
    } catch (err) {
      console.error('[useSearchSaver] CATCH Error saving multi-origin search:', err);
      const errorMessage = err instanceof Error ? err.message : 'Failed to save search due to an unexpected error.';
      setError(errorMessage);
      toast.error('Failed to save search to history due to an unexpected error.');
    } finally {
      setIsSaving(false);
    }
  };

  return { saveSearch, saveMultiOriginSearch, isSaving, error };
} 